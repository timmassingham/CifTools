/*
 *  Copyright (C) 2010 by Tim Massingham
 *  tim.massingham@ebi.ac.uk
 *
 *  This file is part of the ciftool.
 *
 *  ciftool is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  ciftool is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with ciftool.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _LIST_GH
#define _LIST_GH
    #include <stdio.h>
	#include <stdlib.h>
	#include <stdbool.h>
	#include <assert.h>
	#include <err.h>
	#include <errno.h>
	
	#define LIST(A)	struct _list_ ## A *
	#define null_LIST(A)	(LIST(A)){NULL,0}
	#define new_LIST(A)	    new_list_ ## A
	#define free_LIST(A)	free_list_ ## A
	#define	copy_LIST(A)	copy_list_ ## A
	#define cons_LIST(A)    cons_list_ ## A
	#define show_LIST(A)    show_list_ ## A
	#define length_LIST(A)  length_list_ ## A
#endif

// List structure containing element
struct X(_list_){
	X() elt;
	struct X(_list_) * nxt;
};

// The empty list is NULL
static inline struct X(_list_) * X(new_list_)(void){
    return NULL;
}

// Free list but not elements
static inline void X(shallow_free_list_)(struct X(_list_) * list ){
    if(NULL==list){ return;}
    while(NULL!=list){
        struct X(_list_) * nxt = list->nxt;
        free(list);
        list = nxt;
    }
}

// Free list and elements
static inline void X(deep_free_list_)(struct X(_list_) * list ){
    if(NULL==list){ return;}
    while(NULL!=list){
        struct X(_list_) * nxt = list->nxt;
        X(free_)(list->elt);
        free(list);
        list = nxt;
    }
}

// Default free is deep
static inline void X(free_list_)(struct X(_list_) * list ){
     X(deep_free_list_)(list);
}

// Shallow copy of list
static inline struct X(_list_) * X(shallow_copy_list_)(const struct X(_list_) * list){
    if(NULL==list){ return NULL;}

    struct X(_list_) * clist = calloc(1,sizeof(struct X(_list_)));
    clist->elt = list->elt;

    struct X(_list_) * node = list->nxt;
    struct X(_list_) * newnode = clist;
    while(NULL!=node){
        struct X(_list_) * newnode2 = calloc(1,sizeof(struct X(_list_)));
        newnode2->elt = node->elt;
        newnode->nxt = newnode2;
        newnode = newnode2;
        node = node->nxt;
    }
    return clist;
}

// Deep copy of list
static inline struct X(_list_) * X(deep_copy_list_)(const struct X(_list_) * list){
    if(NULL==list){ return NULL;}

    struct X(_list_) * clist = calloc(1,sizeof(struct X(_list_)));
    clist->elt = X(copy_)(list->elt);

    struct X(_list_) * node = list->nxt;
    struct X(_list_) * newnode = clist;
    while(NULL!=node){
        struct X(_list_) * newnode2 = calloc(1,sizeof(struct X(_list_)));
        newnode2->elt = X(copy_)(node->elt);
        newnode->nxt = newnode2;
        newnode = newnode2;
        node = node->nxt;
    }
    return clist;
}

// Default copy is deep
static inline struct X(_list_) * X(copy_list_)(const struct X(_list_) * list){
    return X(deep_copy_list_)(list);
}

// Macros for quoting type.
#define Q_(A) #A            // Quote argument
#define Q(A)  Q_(A)         // Expand argument and call quoting
static inline void  X(show_list_)(XFILE * fp, struct X(_list_) * list, const unsigned int maxdepth){
    if(NULL==list){ xfputs("Empty list\n",fp); }
    xfputs("List of " Q(X()) ":\n",fp);
    struct X(_list_) * node = list;
    unsigned int n=0;
    while(NULL!=node && (maxdepth==0 || n<maxdepth)){
        X(show_)(fp,node->elt);
        xfputc('\n',fp);
        node = node->nxt;
        n++;
    }
}
#undef Q
#undef Q_

static inline unsigned int X(length_list_)( struct X(_list_) * list ){
    unsigned i=0;
    while(NULL!=list){
        i++;
        list = list->nxt;
    }
    return i;
}

static inline X() X(head_list_)(const struct X(_list_) *list){
    // Taking the head of empty list is an error
	if(NULL!=list){ errx(EINVAL,"Taking head of empty list at %s (%s:%d)",__func__,__FILE__,__LINE__);}
	return list->elt;
}

static inline struct X(_list_) * X(tail_list_)(const struct X(_list_) *list){
    // Assumed that the tail of an empty list is the empty list
	return (NULL!=list)?list->nxt:NULL;
}

// Cons a new element, copying it
static inline struct X(_list_) * X(conscopy_list_)(const X() elt, struct X(_list_) *list){
	struct X(_list_) * node = calloc(1,sizeof(struct X(_list_)));
	if(NULL==node){return NULL;}
	node->elt = X(copy_)(elt);
	node->nxt = list;
	return node;
}

// Cons a new element, keeping as input
static inline struct X(_list_) * X(cons_list_)(const X() elt, struct X(_list_) *list){
        struct X(_list_) * node = calloc(1,sizeof(struct X(_list_)));
        if(NULL==node){return NULL;}
        node->elt = elt;
        node->nxt = list;
        return node;
}


// Reverse a list inplace (destroys original list). Returns new head
static inline struct X(_list_) * X(reverse_inplace_list_)(struct X(_list_) *list){
    if(NULL==list){ return NULL;}
    struct X(_list_) * newhead = list->nxt;
    list->nxt = NULL;
    while(NULL!=newhead){
        struct X(_list_) * nxt = newhead->nxt;
        newhead->nxt = list;
        list = newhead;
        newhead = nxt;
    }
    return list;
}

// Reverse list, copying
static inline struct X(_list_) * X(reverse_list_)(const struct X(_list_) *list){
    if(NULL==list){ return NULL;}
    struct X(_list_) * rlist = X(deep_copy_list_)(list);
    return X(reverse_inplace_list_)(rlist);
}

// Filter a list according to function
static inline struct X(_list_) * X(filter_list_)( bool (*f)(const X(), const void *), struct X(_list_) * list, const void * fdat){
    if(NULL==f){ return NULL;}
    
    struct X(_list_) * newlist = NULL;
    struct X(_list_) * node = list;
    while( NULL!=node ){
        if( f(node->elt,fdat) ){
            newlist = X(cons_list_)(node->elt,newlist);
        }
        node = node->nxt;
    }
    return newlist;
}

// Filter a list according to function, copying elements
static inline struct X(_list_) * X(filtercopy_list_)( bool (*f)(const X(), const void *), struct X(_list_) * list, const void * fdat){
    if(NULL==f){ return NULL;}
    
    struct X(_list_) * newlist = NULL;
    struct X(_list_) * node = list;
    while( NULL!=node ){
        if( f(node->elt,fdat) ){
            newlist = X(conscopy_list_)(node->elt,newlist);
        }
        node = node->nxt;
    }
    return newlist;
}

// Split list into categories according to function f.
static inline struct X(_list_) ** X(split_list_)( unsigned int (*f)(const X(), const void *),
                                                  struct X(_list_) * list, const unsigned int ncat,
                                                  const void * fdat)
{
    if(NULL==f){return NULL;}
    if(0==ncat){return NULL;}
    struct X(_list_) ** listarray = calloc(ncat,sizeof(*listarray));
    if(NULL==listarray){return NULL;}
    
    struct X(_list_) * node = list;
    while( NULL!=node ){
        unsigned cat = f(node->elt,fdat);
        assert(cat<ncat);
        listarray[cat] = X(cons_list_)(node->elt,listarray[cat]);
        node = node->nxt;
    }
    return listarray;
}
                                                  
